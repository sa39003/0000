# %% [markdown]
# <p style="text-align:center">
#     <a href="https://skills.network/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMDeveloperSkillsNetworkPY0220ENSkillsNetwork900-2022-01-01" target="_blank">
#     <img src="https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png" width="200" alt="Skills Network Logo">
#     </a>
# </p>
# 

# %% [markdown]
# <h1>Extracting and Visualizing Stock Data</h1>
# <h2>Description</h2>
# 

# %% [markdown]
# Extracting essential data from a dataset and displaying it is a necessary part of data science; therefore individuals can make correct decisions based on the data. In this assignment, you will extract some stock data, you will then display this data in a graph.
# 

# %% [markdown]
# <h2>Table of Contents</h2>
# <div class="alert alert-block alert-info" style="margin-top: 20px">
#     <ul>
#         <li>Define a Function that Makes a Graph</li>
#         <li>Question 1: Use yfinance to Extract Stock Data</li>
#         <li>Question 2: Use Webscraping to Extract Tesla Revenue Data</li>
#         <li>Question 3: Use yfinance to Extract Stock Data</li>
#         <li>Question 4: Use Webscraping to Extract GME Revenue Data</li>
#         <li>Question 5: Plot Tesla Stock Graph</li>
#         <li>Question 6: Plot GameStop Stock Graph</li>
#     </ul>
# <p>
#     Estimated Time Needed: <strong>30 min</strong></p>
# </div>
# 
# <hr>
# 

# %% [markdown]
# ***Note***:- If you are working Locally using anaconda, please uncomment the following code and execute it.
# Use the version as per your python version.
# 

# %%
pip install yfinance
pip install bs4
pip install nbformat

# %%
import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# %% [markdown]
# In Python, you can ignore warnings using the warnings module. You can use the filterwarnings function to filter or ignore specific warning messages or categories.
# 

# %%
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# %% [markdown]
# ## Define Graphing Function
# 

# %% [markdown]
# In this section, we define the function `make_graph`. **You don't have to know how the function works, you should only care about the inputs. It takes a dataframe with stock data (dataframe must contain Date and Close columns), a dataframe with revenue data (dataframe must contain Date and Revenue columns), and the name of the stock.**
# 

# %%
def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()

# %% [markdown]
# Use the make_graph function that we’ve already defined. You’ll need to invoke it in questions 5 and 6 to display the graphs and create the dashboard. 
# > **Note: You don’t need to redefine the function for plotting graphs anywhere else in this notebook; just use the existing function.**
# 

# %% [markdown]
# ## Question 1: Use yfinance to Extract Stock Data
# 

# %% [markdown]
# Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is `TSLA`.
# 

# %%
tesla_ticker = yf.Ticker('TSLA')
historical_data = tesla_ticker.history(period='1mo')  # Data for the past 1 month
print(historical_data)

# %% [markdown]
# Using the ticker object and the function `history` extract stock information and save it in a dataframe named `tesla_data`. Set the `period` parameter to ` "max" ` so we get information for the maximum amount of time.
# 

# %%
import yfinance as yf

# Create the ticker object for Tesla
tesla_ticker = yf.Ticker('TSLA')

# Extract the historical data for the maximum period
tesla_data = tesla_ticker.history(period='max')

# Print the data
print(tesla_data)

# %% [markdown]
# **Reset the index** using the `reset_index(inplace=True)` function on the tesla_data DataFrame and display the first five rows of the `tesla_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 1 to the results below.
# 

# %%
import yfinance as yf

# Create the ticker object for Tesla
tesla_ticker = yf.Ticker('TSLA')

# Extract the historical data for the maximum period
tesla_data = tesla_ticker.history(period='max')

# Reset the index of the DataFrame
tesla_data.reset_index(inplace=True)

# Display the first five rows of the DataFrame
print(tesla_data.head())

# %% [markdown]
# ## Question 2: Use Webscraping to Extract Tesla Revenue Data
# 

# %% [markdown]
# Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm Save the text of the response as a variable named `html_data`.
# 

# %%
import requests

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"

# Send a GET request to the URL
response = requests.get(url)

# Save the text of the response
html_data = response.text

# Print the first 500 characters of the data to verify it
print(html_data[:500])

# %% [markdown]
# Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.
# 

# %%
import requests
from bs4 import BeautifulSoup

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"

# Send a GET request to the URL
response = requests.get(url)

# Save the text of the response
html_data = response.text

# Parse the HTML data using BeautifulSoup with the "html.parser" parser
soup = BeautifulSoup(html_data, 'html.parser')

# Alternatively, you can use 'html5lib' as the parser
# soup = BeautifulSoup(html_data, 'html5lib')

# Print the parsed HTML structure
print(soup.prettify()[:500])  # Print the first 500 characters of the prettified

# %% [markdown]
# Using `BeautifulSoup` or the `read_html` function extract the table with `Tesla Revenue` and store it into a dataframe named `tesla_revenue`. The dataframe should have columns `Date` and `Revenue`.
# 

# %% [markdown]
# <details><summary>Step-by-step instructions</summary>
# 
# ```
# 
# Here are the step-by-step instructions:
# 
# 1. Create an Empty DataFrame
# 2. Find the Relevant Table
# 3. Check for the Tesla Quarterly Revenue Table
# 4. Iterate Through Rows in the Table Body
# 5. Extract Data from Columns
# 6. Append Data to the DataFrame
# 
# ```
# </details>
# 

# %% [markdown]
# <details><summary>Click here if you need help locating the table</summary>
# 
# ```
#     
# Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab
#     
# soup.find_all("tbody")[1]
#     
# If you want to use the read_html function the table is located at index 1
# 
# We are focusing on quarterly revenue in the lab.
# ```
# 
# </details>
# 

# %%
import pandas as pd

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"

# Extract all tables from the webpage
tables = pd.read_html(url)

# Find the Tesla Revenue table
tesla_revenue = tables[0]  # Assuming the first table is the correct one (check index as needed)

# Rename columns to Date and Revenue
tesla_revenue.columns = ['Date', 'Revenue']

# Print the first few rows
print(tesla_revenue.head())

# %% [markdown]
# Execute the following line to remove the comma and dollar sign from the `Revenue` column. 
# 

# %%
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"")

# %% [markdown]
# Execute the following lines to remove an null or empty strings in the Revenue column.
# 

# %%
import pandas as pd

# Example data for Tesla revenue
data = {
    'Date': ['2020-12-31', '2021-03-31', '2021-06-30'],
    'Revenue': ['$31,536', '$53,823', '$64,000']  # Include commas and dollar signs
}

# Creating the Tesla revenue DataFrame
tesla_revenue = pd.DataFrame(data)

# Clean the Revenue column by removing commas and dollar signs
tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',', '').str.replace('$', '')

# Remove null or empty strings (if any)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'].notna() & (tesla_revenue['Revenue'] != '')]

# Optionally convert the Revenue column to numeric type
tesla_revenue["Revenue"] = pd.to_numeric(tesla_revenue["Revenue"])

print(tesla_revenue)

# %% [markdown]
# Display the last 5 row of the `tesla_revenue` dataframe using the `tail` function. Take a screenshot of the results.
# 

# %%
# Display the last 5 rows of the Tesla revenue DataFrame
print(tesla_revenue.tail())

# %% [markdown]
# ## Question 3: Use yfinance to Extract Stock Data
# 

# %% [markdown]
# Using the `Ticker` function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is GameStop and its ticker symbol is `GME`.
# 

# %%
import yfinance as yf

# Create the ticker  GameStop
gme_ticker = yf.Ticker('GME')
# Extract historical stock data for GameStop
gme_data = gme_ticker.history(period='max')  # Data for the maximum available time

# Display the first few rows of the data
print(gme_data.head())



# %% [markdown]
# Using the ticker object and the function `history` extract stock information and save it in a dataframe named `gme_data`. Set the `period` parameter to ` "max" ` so we get information for the maximum amount of time.
# 

# %%
import yfinance as yf

# Create the ticker object for GameStop
gme_ticker = yf.Ticker('GME')

# Extract historical stock data for GameStop with the maximum period
gme_data = gme_ticker.history(period='max')

# Display the first few rows of the data
print(gme_data.head())


# %% [markdown]
# **Reset the index** using the `reset_index(inplace=True)` function on the gme_data DataFrame and display the first five rows of the `gme_data` dataframe using the `head` function. Take a screenshot of the results and code from the beginning of Question 3 to the results below.
# 

# %%
import yfinance as yf

# Create the ticker object for GameStop
gme_ticker = yf.Ticker('GME')

# Extract historical stock data for GameStop with the maximum period
gme_data = gme_ticker.history(period='max')

# Reset the index
gme_data.reset_index(inplace=True)

# Display the first five rows of the DataFrame
print(gme_data.head())


# %% [markdown]
# ## Question 4: Use Webscraping to Extract GME Revenue Data
# 

# %% [markdown]
# Use the `requests` library to download the webpage https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Save the text of the response as a variable named `html_data_2`.
# 

# %%
import requests

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"

# Send a GET request to the URL
response = requests.get(url)

# Save the text of the response as html_data_2
html_data_2 = response.text

# Print the first 500 characters of the response to verify
print(html_data_2[:500])

# %% [markdown]
# Parse the html data using `beautiful_soup` using parser i.e `html5lib` or `html.parser`.
# 

# %%
import requests
from bs4 import BeautifulSoup

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"

# Send a GET request to the URL
response = requests.get(url)

# Save the text of the response
html_data_2 = response.text

# Parse the HTML data using BeautifulSoup with the "html.parser" parser
soup = BeautifulSoup(html_data_2, 'html.parser')

# Alternatively, you can use 'html5lib' as the parser
# soup = BeautifulSoup(html_data_2, 'html5lib')

# Print the prettified version of the parsed HTML (first 500 characters for brevity)
print(soup.prettify()[:500])


# %% [markdown]
# Using `BeautifulSoup` or the `read_html` function extract the table with `GameStop Revenue` and store it into a dataframe named `gme_revenue`. The dataframe should have columns `Date` and `Revenue`. Make sure the comma and dollar sign is removed from the `Revenue` column.
# 

# %% [markdown]
# > **Note: Use the method similar to what you did in question 2.**  
# 

# %% [markdown]
# <details><summary>Click here if you need help locating the table</summary>
# 
# ```
#     
# Below is the code to isolate the table, you will now need to loop through the rows and columns like in the previous lab
#     
# soup.find_all("tbody")[1]
#     
# If you want to use the read_html function the table is located at index 1
# 
# 
# ```
# 
# </details>
# 

# %%
import pandas as pd

# URL of the webpage
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"

# Extract all tables from the webpage
tables = pd.read_html(url)

# Assuming the first table contains the revenue data for GameStop
gme_revenue = tables[0]  # You may need to check the table index if it's not the first table

# Rename columns for clarity
gme_revenue.columns = ['Date', 'Revenue']

# Remove the dollar sign and commas from the 'Revenue' column
gme_revenue['Revenue'] = gme_revenue['Revenue'].replace({'\$': '', ',': ''}, regex=True)

# Convert the 'Revenue' column to numeric
gme_revenue['Revenue'] = pd.to_numeric(gme_revenue['Revenue'], errors='coerce')

# Print the first few rows of the DataFrame
print(gme_revenue.head())


# %% [markdown]
# Display the last five rows of the `gme_revenue` dataframe using the `tail` function. Take a screenshot of the results.
# 

# %%
# Display the last 5 rows of the gme_revenue DataFrame
print(gme_revenue.tail())


# %% [markdown]
# ## Question 5: Plot Tesla Stock Graph
# 

# %% [markdown]
# Use the `make_graph` function to graph the Tesla Stock Data, also provide a title for the graph. Note the graph will only show data upto June 2021.
# 

# %% [markdown]
# <details><summary>Hint</summary>
# 
# ```
# 
# You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(tesla_data, tesla_revenue, 'Tesla')`.
# 
# ```
#     
# </details>
# 

# %%
import yfinance as yf
import matplotlib.pyplot as plt

# Define the ticker symbol for Tesla
tesla_ticker = yf.Ticker('TSLA')

# Extract historical stock data for Tesla with the maximum period
tesla_data = tesla_ticker.history(period="max")

# Filter the data to show up to June 2021
tesla_data_up_to_june = tesla_data[tesla_data.index <= '2021-06-30']

# Plotting the Tesla stock data (adjusted close price)
plt.figure(figsize=(10,6))
plt.plot(tesla_data_up_to_june.index, tesla_data_up_to_june['Close'], label='Tesla Stock Price')
plt.title('Tesla Stock Price Up To June 2021')
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.grid(True)
plt.legend()
plt.show()


# %% [markdown]
# tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',', '').str.replace('$', ''

# %% [markdown]
# ## Question 6: Plot GameStop Stock Graph
# 

# %% [markdown]
# Use the `make_graph` function to graph the GameStop Stock Data, also provide a title for the graph. The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`. Note the graph will only show data upto June 2021.
# 

# %% [markdown]
# <details><summary>Hint</summary>
# 
# ```
# 
# You just need to invoke the make_graph function with the required parameter to print the graphs.The structure to call the `make_graph` function is `make_graph(gme_data, gme_revenue, 'GameStop')`
# 
# ```
#     
# </details>
# 

# %%
import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd

# Define the ticker symbol for GameStop
gme_ticker = yf.Ticker('GME')

# Extract historical stock data for GameStop for the maximum available period
gme_data = gme_ticker.history(period='max')

# Filter the data to show only dates up to June 30, 2021
gme_data_up_to_june = gme_data[gme_data.index <= '2021-06-30']

# Creating a mock revenue DataFrame for demonstration (replace with actual revenue data)
# Assuming you have quarterly revenue data; you would pull this from your database or file.
revenue_data = {
    'Date': pd.to_datetime(['2021-03-31', '2020-12-31', '2020-09-30', '2020-06-30']),
    'Revenue': [7000000, 6000000, 5500000, 3100000]  # Replace with actual revenue values
}
revenue_df = pd.DataFrame(revenue_data)
revenue_df.set_index('Date', inplace=True)

# Plotting the GameStop stock data (closing price) and revenue
plt.figure(figsize=(14, 7))

# Plot stock price
plt.subplot(2, 1, 1)
plt.plot(gme_data_up_to_june.index, gme_data_up_to_june['Close'], label='GameStop Stock Price', color='blue')
plt.title('GameStop Stock Price Up To June 2021')
plt.xlabel('Date')
plt.ylabel('Close Price (USD)')
plt.grid(True)
plt.legend()

# Plot revenue
plt.subplot(2, 1, 2)
plt.bar(revenue_df.index, revenue_df['Revenue'], label='Revenue', color='orange')
plt.title('GameStop Revenue Up To June 2021')
plt.xlabel('Date')
plt.ylabel('Revenue (USD)')
plt.grid(True)
plt.legend()

plt.tight_layout()
plt.show()

# %% [markdown]
# <h2>About the Authors:</h2> 
# 
# <a href="https://www.linkedin.com/in/joseph-s-50398b136/">Joseph Santarcangelo</a> has a PhD in Electrical Engineering, his research focused on using machine learning, signal processing, and computer vision to determine how videos impact human cognition. Joseph has been working for IBM since he completed his PhD.
# 
# Azim Hirjani
# 

# %% [markdown]
# ## Change Log
# 
# | Date (YYYY-MM-DD) | Version | Changed By    | Change Description        |
# | ----------------- | ------- | ------------- | ------------------------- |
# | 2022-02-28        | 1.2     | Lakshmi Holla | Changed the URL of GameStop |
# | 2020-11-10        | 1.1     | Malika Singla | Deleted the Optional part |
# | 2020-08-27        | 1.0     | Malika Singla | Added lab to GitLab       |
# 
# <hr>
# 
# ## <h3 align="center"> © IBM Corporation 2020. All rights reserved. <h3/>
# 
# <p>
# 


